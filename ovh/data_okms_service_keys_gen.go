// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	ovhtypes "github.com/ovh/terraform-provider-ovh/ovh/types"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OkmsServiceKeysDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"okms_id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Okms ID",
			MarkdownDescription: "Okms ID",
		},
		"okms_service_keys": schema.SetNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: OkmsServiceKeyAttributes(ctx),
				CustomType: OkmsServiceKeysType{
					ObjectType: types.ObjectType{
						AttrTypes: OkmsServiceKeysValue{}.AttributeTypes(ctx),
					},
				},
			},
			CustomType: ovhtypes.NewTfListNestedType[OkmsServiceKeysValue](ctx),
			Computed:   true,
		},
	}

	return schema.Schema{
		Attributes: attrs,
	}
}

type OkmsServiceKeysModel struct {
	OkmsId          ovhtypes.TfStringValue                           `tfsdk:"okms_id" json:"okmsId"`
	OkmsServiceKeys ovhtypes.TfListNestedValue[OkmsServiceKeysValue] `tfsdk:"okms_service_keys" json:"okmsServiceKeys"`
}

func (v *OkmsServiceKeysModel) MergeWith(other *OkmsServiceKeysModel) {

	if (v.OkmsId.IsUnknown() || v.OkmsId.IsNull()) && !other.OkmsId.IsUnknown() {
		v.OkmsId = other.OkmsId
	}

	if (v.OkmsServiceKeys.IsUnknown() || v.OkmsServiceKeys.IsNull()) && !other.OkmsServiceKeys.IsUnknown() {
		v.OkmsServiceKeys = other.OkmsServiceKeys
	}

}

var _ basetypes.ObjectTypable = OkmsServiceKeysType{}

type OkmsServiceKeysType struct {
	basetypes.ObjectType
}

func (t OkmsServiceKeysType) Equal(o attr.Type) bool {
	other, ok := o.(OkmsServiceKeysType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OkmsServiceKeysType) String() string {
	return "OkmsServiceKeysType"
}

func (t OkmsServiceKeysType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be ovhtypes.TfStringValue, was: %T`, createdAtAttribute))
	}

	curveAttribute, ok := attributes["curve"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`curve is missing from object`)

		return nil, diags
	}

	curveVal, ok := curveAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`curve expected to be ovhtypes.TfStringValue, was: %T`, curveAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be ovhtypes.TfStringValue, was: %T`, nameAttribute))
	}

	operationsAttribute, ok := attributes["operations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`operations is missing from object`)

		return nil, diags
	}

	operationsVal, ok := operationsAttribute.(ovhtypes.TfListNestedValue[ovhtypes.TfStringValue])

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`operations expected to be ovhtypes.TfListNestedValue[ovhtypes.TfStringValue], was: %T`, operationsAttribute))
	}

	sizeAttribute, ok := attributes["size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`size is missing from object`)

		return nil, diags
	}

	sizeVal, ok := sizeAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`size expected to be ovhtypes.TfInt64Value, was: %T`, sizeAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be ovhtypes.TfStringValue, was: %T`, stateAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be ovhtypes.TfStringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OkmsServiceKeysValue{
		CreatedAt:           createdAtVal,
		Curve:               curveVal,
		Id:                  idVal,
		Name:                nameVal,
		Operations:          operationsVal,
		Size:                sizeVal,
		State:               stateVal,
		OkmsServiceKeysType: typeVal,
		state:               attr.ValueStateKnown,
	}, diags
}

func NewOkmsServiceKeysValueNull() OkmsServiceKeysValue {
	return OkmsServiceKeysValue{
		state: attr.ValueStateNull,
	}
}

func NewOkmsServiceKeysValueUnknown() OkmsServiceKeysValue {
	return OkmsServiceKeysValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOkmsServiceKeysValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OkmsServiceKeysValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OkmsServiceKeysValue Attribute Value",
				"While creating a OkmsServiceKeysValue value, a missing attribute value was detected. "+
					"A OkmsServiceKeysValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OkmsServiceKeysValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OkmsServiceKeysValue Attribute Type",
				"While creating a OkmsServiceKeysValue value, an invalid attribute value was detected. "+
					"A OkmsServiceKeysValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OkmsServiceKeysValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OkmsServiceKeysValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OkmsServiceKeysValue Attribute Value",
				"While creating a OkmsServiceKeysValue value, an extra attribute value was detected. "+
					"A OkmsServiceKeysValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OkmsServiceKeysValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOkmsServiceKeysValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewOkmsServiceKeysValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be ovhtypes.TfStringValue, was: %T`, createdAtAttribute))
	}

	curveAttribute, ok := attributes["curve"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`curve is missing from object`)

		return NewOkmsServiceKeysValueUnknown(), diags
	}

	curveVal, ok := curveAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`curve expected to be ovhtypes.TfStringValue, was: %T`, curveAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewOkmsServiceKeysValueUnknown(), diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewOkmsServiceKeysValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be ovhtypes.TfStringValue, was: %T`, nameAttribute))
	}

	operationsAttribute, ok := attributes["operations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`operations is missing from object`)

		return NewOkmsServiceKeysValueUnknown(), diags
	}

	operationsVal, ok := operationsAttribute.(ovhtypes.TfListNestedValue[ovhtypes.TfStringValue])

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`operations expected to be ovhtypes.TfListNestedValue[ovhtypes.TfStringValue], was: %T`, operationsAttribute))
	}

	sizeAttribute, ok := attributes["size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`size is missing from object`)

		return NewOkmsServiceKeysValueUnknown(), diags
	}

	sizeVal, ok := sizeAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`size expected to be ovhtypes.TfInt64Value, was: %T`, sizeAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewOkmsServiceKeysValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be ovhtypes.TfStringValue, was: %T`, stateAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewOkmsServiceKeysValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be ovhtypes.TfStringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewOkmsServiceKeysValueUnknown(), diags
	}

	return OkmsServiceKeysValue{
		CreatedAt:           createdAtVal,
		Curve:               curveVal,
		Id:                  idVal,
		Name:                nameVal,
		Operations:          operationsVal,
		Size:                sizeVal,
		State:               stateVal,
		OkmsServiceKeysType: typeVal,
		state:               attr.ValueStateKnown,
	}, diags
}

func NewOkmsServiceKeysValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OkmsServiceKeysValue {
	object, diags := NewOkmsServiceKeysValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOkmsServiceKeysValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OkmsServiceKeysType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOkmsServiceKeysValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOkmsServiceKeysValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOkmsServiceKeysValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOkmsServiceKeysValueMust(OkmsServiceKeysValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OkmsServiceKeysType) ValueType(ctx context.Context) attr.Value {
	return OkmsServiceKeysValue{}
}

var _ basetypes.ObjectValuable = OkmsServiceKeysValue{}

type OkmsServiceKeysValue struct {
	CreatedAt           ovhtypes.TfStringValue                             `tfsdk:"created_at" json:"createdAt"`
	Curve               ovhtypes.TfStringValue                             `tfsdk:"curve" json:"curve"`
	Id                  ovhtypes.TfStringValue                             `tfsdk:"id" json:"id"`
	Name                ovhtypes.TfStringValue                             `tfsdk:"name" json:"name"`
	Operations          ovhtypes.TfListNestedValue[ovhtypes.TfStringValue] `tfsdk:"operations" json:"operations"`
	Size                ovhtypes.TfInt64Value                              `tfsdk:"size" json:"size"`
	State               ovhtypes.TfStringValue                             `tfsdk:"state" json:"state"`
	OkmsServiceKeysType ovhtypes.TfStringValue                             `tfsdk:"type" json:"type"`
	state               attr.ValueState
}

func (v *OkmsServiceKeysValue) UnmarshalJSON(data []byte) error {
	type JsonOkmsServiceKeysValue OkmsServiceKeysValue

	var tmp JsonOkmsServiceKeysValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.CreatedAt = tmp.CreatedAt
	v.Curve = tmp.Curve
	v.Id = tmp.Id
	v.Name = tmp.Name
	v.Operations = tmp.Operations
	v.Size = tmp.Size
	v.State = tmp.State
	v.OkmsServiceKeysType = tmp.OkmsServiceKeysType

	v.state = attr.ValueStateKnown

	return nil
}

func (v *OkmsServiceKeysValue) MergeWith(other *OkmsServiceKeysValue) {

	if (v.CreatedAt.IsUnknown() || v.CreatedAt.IsNull()) && !other.CreatedAt.IsUnknown() {
		v.CreatedAt = other.CreatedAt
	}

	if (v.Curve.IsUnknown() || v.Curve.IsNull()) && !other.Curve.IsUnknown() {
		v.Curve = other.Curve
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.Operations.IsUnknown() || v.Operations.IsNull()) && !other.Operations.IsUnknown() {
		v.Operations = other.Operations
	}

	if (v.Size.IsUnknown() || v.Size.IsNull()) && !other.Size.IsUnknown() {
		v.Size = other.Size
	}

	if (v.State.IsUnknown() || v.State.IsNull()) && !other.State.IsUnknown() {
		v.State = other.State
	}

	if (v.OkmsServiceKeysType.IsUnknown() || v.OkmsServiceKeysType.IsNull()) && !other.OkmsServiceKeysType.IsUnknown() {
		v.OkmsServiceKeysType = other.OkmsServiceKeysType
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v OkmsServiceKeysValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"createdAt":  v.CreatedAt,
		"curve":      v.Curve,
		"id":         v.Id,
		"name":       v.Name,
		"operations": v.Operations,
		"size":       v.Size,
		"state":      v.State,
		"type":       v.OkmsServiceKeysType,
	}
}
func (v OkmsServiceKeysValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["curve"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["operations"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["size"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.Curve.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["curve"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Operations.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["operations"] = val

		val, err = v.Size.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["size"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.OkmsServiceKeysType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OkmsServiceKeysValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OkmsServiceKeysValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OkmsServiceKeysValue) String() string {
	return "OkmsServiceKeysValue"
}

func (v OkmsServiceKeysValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"created_at": ovhtypes.TfStringType{},
			"curve":      ovhtypes.TfStringType{},
			"id":         ovhtypes.TfStringType{},
			"name":       ovhtypes.TfStringType{},
			"operations": ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
			"size":       ovhtypes.TfInt64Type{},
			"state":      ovhtypes.TfStringType{},
			"type":       ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"created_at": v.CreatedAt,
			"curve":      v.Curve,
			"id":         v.Id,
			"name":       v.Name,
			"operations": v.Operations,
			"size":       v.Size,
			"state":      v.State,
			"type":       v.OkmsServiceKeysType,
		})

	return objVal, diags
}

func (v OkmsServiceKeysValue) Equal(o attr.Value) bool {
	other, ok := o.(OkmsServiceKeysValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.Curve.Equal(other.Curve) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Operations.Equal(other.Operations) {
		return false
	}

	if !v.Size.Equal(other.Size) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.OkmsServiceKeysType.Equal(other.OkmsServiceKeysType) {
		return false
	}

	return true
}

func (v OkmsServiceKeysValue) Type(ctx context.Context) attr.Type {
	return OkmsServiceKeysType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OkmsServiceKeysValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at": ovhtypes.TfStringType{},
		"curve":      ovhtypes.TfStringType{},
		"id":         ovhtypes.TfStringType{},
		"name":       ovhtypes.TfStringType{},
		"operations": ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
		"size":       ovhtypes.TfInt64Type{},
		"state":      ovhtypes.TfStringType{},
		"type":       ovhtypes.TfStringType{},
	}
}
